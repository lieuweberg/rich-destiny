#!/bin/bash
if [[ $# -eq 0 ]] ; then
    printf "Please specify a build version starting with v for production, one arg for executable, twice (vNEW vOLD) for patch, or "dev" for development (important!)"
    exit 1
elif [[ $# -eq 1 ]] ; then
    printf "Creating syso file\n"
    # echo '{"Str ... 0"}}}}' > versioninfo.json
    printf '{"StringFileInfo":{"FileVersion":"'$1'","ProductVersion":"'$1'","FileDescription":"rich-destiny","CompanyName":"lieuwe_berg (lieuweberg.com / richdestiny.app)","InternalName":"rich-destiny","LegalCopyright":"Copyright (c) lieuwe_berg","OriginalFilename":"rich-destiny.exe","ProductName":"rich-destiny","Comments":"","LegalTrademarks":"","PrivateBuild":"","SpecialBuild":""},"IconPath":"../assets/rich-destiny.ico","FixedFileInfo":{"FileVersion":{"Major":0,"Minor":0,"Patch":0,"Build":0},"ProductVersion":{"Major":0,"Minor":0,"Patch":0,"Build":0},"FileFlagsMask":"3f","FileFlags ":"00","FileOS":"040004","FileType":"01","FileSubType":"00"},"VarFileInfo":{"Translation":{"LangID":"0409","CharsetID":"04B0"}}}' > versioninfo.json
    goversioninfo -64
fi

if [ $1 = "dev" ] ; then
    printf "Building $1 executable\n\n" 
    go build -o rich-destiny.exe -ldflags "-X main.version=$1"
elif [[ $# -eq 1 ]] ; then
    printf "Building $1 executable\n\n"
    go build -o out/rich-destiny-$1.exe -ldflags "-X main.version=$1"
    printf "\nNote to self: rename the output executable to 'rich-destiny.exe' in GH releases!"
elif [[ $# -eq 2 ]] ; then
    printf "Building $1 patch\n\n"
    # ./bsdiff oldfile newfile patchfile
    ./bsdiff ./out/rich-destiny-$2.exe ./out/rich-destiny-$1.exe ./out/rich-destiny-$1.patch
else
    printf "Need one or two arguments, like this: ./build vNEW [vOLD]"
fi
